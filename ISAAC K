{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/IsaacK100/Taller1_Mutaciones-del-ADN-x-/blob/main/IsaacK\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "H5Sfoh8voiPn"
      },
      "outputs": [],
      "source": [
        "def validate_dnaX (dna_seq):\n",
        "# Checks if DNA sequence is valid. Returns True is sequence is valid, or False otherwise. \"\n",
        "  seqm = dna_seq.upper()\n",
        "  valid = seqm.count(\"A\") + seqm.count(\"C\") + seqm.count(\"G\") + seqm.count(\"T\")\n",
        "  if valid == len (seqm): return True\n",
        "  else : return False"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "validate_dnaX(\"aGAagagagatctcG\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4S5epPDwpTaE",
        "outputId": "da80d80a-fc6b-4d41-c703-c616fbf18675"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "validate_dna(\"ATAGAXTAGAT\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rO5yb-8opnsz",
        "outputId": "fca99b0a-e34a-4347-d071-c7151c9a1616"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def frequencyX (seq):\n",
        "# Calculates the frequency of each symbol in the sequence. Returns a dictionary. \"\"\"\n",
        "  dic = {}\n",
        "  for s in seq.upper():\n",
        "    if s in dic: dic[s] += 1\n",
        "    else : dic[s] = 1\n",
        "  return dic"
      ],
      "metadata": {
        "id": "6sDwOSF7qi28"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        " frequencyX(\"atagataacXXtcgcatag\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "imirlbwPq2ts",
        "outputId": "958368f5-80fa-463e-e1f9-ff41e49373c0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'A': 7, 'T': 4, 'G': 3, 'C': 3, 'X': 2}"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        " frequency(\"MVVMKKSHHVLHSQSLIK\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bYYSpm9FroVT",
        "outputId": "40cc7278-d8e9-43d6-a4a3-fbf3d684493c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'M': 2, 'V': 3, 'K': 3, 'S': 3, 'H': 3, 'L': 2, 'Q': 1, 'I': 1}"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "seq_aa = input (\"Protein sequence:\")\n",
        "freq_aa = frequency(seq_aa)\n",
        "list_f = sorted (freq_aa.items(), key=lambda x: x[1], reverse = True)\n",
        "for (k,v) in list_f:\n",
        "  print (\"Aminoacid:\", k, \":\", v)"
      ],
      "metadata": {
        "id": "-pLpADdpryq_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "684dff18-765f-49af-dd53-a59adb6f288d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Protein sequence:kcc\n",
            "Aminoacid: C : 2\n",
            "Aminoacid: K : 1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def gc_content (dna_seq):\n",
        "# Returns percentage of G and C nucleotides in a DNA sequence.\n",
        "  gc_count = 0\n",
        "  for s in dna_seq:\n",
        "    if s in \"GCgc\": gc_count += 1\n",
        "  return gc_count / len (dna_seq)"
      ],
      "metadata": {
        "id": "pwyh4oc6sJUc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "gc_content(\"atagagagatctcg\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uhGMahXbs3VM",
        "outputId": "60c13106-d10f-4aaa-869e-a4998f4123ad"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.42857142857142855"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    }
  ]
}
